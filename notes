Problems:

Optimisations:
    a) `find move` -> when searching for moves, looking through a list instead of a set (use (Set Move) instead of [Move] ?)
    b) `king` and `pawn` parsers -> these two have a dependency on parse-order. This shouldn't be.
    
To Do:
     * 1. Add proper checkmate verification
     * 2. Implement proper rendering for the board
     * 3. Implement a game interface
     * 4. Implement parsing of game outcomes -> never interpret a pre-existing PGN game into a termination
     * 5. Add stalemate checks
     * 6 Fix PGN header parser to account for misshaps in ordering + add the other additional  fields a file might have
     * 7. Implement evaluation steps for a Board
     * 8. Implement all PGN tags
    9. Implement translation from Moves -> PGN (add benchmarks, try to simplify, make into chunks and pop every pair of moves)
   10. Refine the API
   11. Write a read-me, documentation and release
   12. Add some more tests:
       -> Parser 
       -> Checks
       -> Checkmates
       -> Writer (moves, position)
   13. Complete game interface (print game as PGN file out when exiting or resigning)  
   14. Add an engine to play against
   15. Add in-game draw suggestions checks
   16. Write a PGN parser that parses files directly and doesn't use bytestrings to extract each individual game
   17. Encode the ambiguity of a move directly when parsing, either in the board, or with the move itself, so that serialisation is less of a burden